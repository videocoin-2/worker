// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transcode_task.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/any"
import _ "github.com/golang/protobuf/ptypes/duration"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TranscodeStatus int32

const (
	TranscodeStatusNone        TranscodeStatus = 0
	TranscodeStatusPending     TranscodeStatus = 1
	TranscodeStatusTranscoding TranscodeStatus = 2
	TranscodeStatusCanceled    TranscodeStatus = 3
	TranscodeStatusFailed      TranscodeStatus = 4
	TranscodeStatusCompleted   TranscodeStatus = 5
	TranscodeStatusReady       TranscodeStatus = 6
)

var TranscodeStatus_name = map[int32]string{
	0: "none",
	1: "pending",
	2: "transcoding",
	3: "canceld",
	4: "failed",
	5: "completed",
	6: "ready",
}
var TranscodeStatus_value = map[string]int32{
	"none":        0,
	"pending":     1,
	"transcoding": 2,
	"canceld":     3,
	"failed":      4,
	"completed":   5,
	"ready":       6,
}

func (x TranscodeStatus) String() string {
	return proto.EnumName(TranscodeStatus_name, int32(x))
}
func (TranscodeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_transcode_task_b4f551f8a5c5f4dd, []int{0}
}

type SimpleTranscodeTask struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InputUrl             string   `protobuf:"bytes,2,opt,name=input_url,json=inputUrl,proto3" json:"input_url,omitempty"`
	OutputUrl            string   `protobuf:"bytes,3,opt,name=output_url,json=outputUrl,proto3" json:"output_url,omitempty"`
	Status               string   `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	UserId               string   `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ApplicationId        string   `protobuf:"bytes,6,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	CreatedAt            string   `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" gorm:"created_at;type:DATETIME;DEFAULT:current_timestamp" sql:"type:DATETIME;DEFAULT:current_timestamp"`
	UpdatedAt            string   `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" gorm:"updated_at;type:DATETIME;DEFAULT:current_timestamp" sql:"type:DATETIME;DEFAULT:current_timestamp"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleTranscodeTask) Reset()         { *m = SimpleTranscodeTask{} }
func (m *SimpleTranscodeTask) String() string { return proto.CompactTextString(m) }
func (*SimpleTranscodeTask) ProtoMessage()    {}
func (*SimpleTranscodeTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_transcode_task_b4f551f8a5c5f4dd, []int{0}
}
func (m *SimpleTranscodeTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleTranscodeTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleTranscodeTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SimpleTranscodeTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleTranscodeTask.Merge(dst, src)
}
func (m *SimpleTranscodeTask) XXX_Size() int {
	return m.Size()
}
func (m *SimpleTranscodeTask) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleTranscodeTask.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleTranscodeTask proto.InternalMessageInfo

func (m *SimpleTranscodeTask) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SimpleTranscodeTask) GetInputUrl() string {
	if m != nil {
		return m.InputUrl
	}
	return ""
}

func (m *SimpleTranscodeTask) GetOutputUrl() string {
	if m != nil {
		return m.OutputUrl
	}
	return ""
}

func (m *SimpleTranscodeTask) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *SimpleTranscodeTask) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SimpleTranscodeTask) GetApplicationId() string {
	if m != nil {
		return m.ApplicationId
	}
	return ""
}

func (m *SimpleTranscodeTask) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *SimpleTranscodeTask) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func init() {
	proto.RegisterType((*SimpleTranscodeTask)(nil), "proto.SimpleTranscodeTask")
	proto.RegisterEnum("proto.TranscodeStatus", TranscodeStatus_name, TranscodeStatus_value)
}
func (m *SimpleTranscodeTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleTranscodeTask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTranscodeTask(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.InputUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTranscodeTask(dAtA, i, uint64(len(m.InputUrl)))
		i += copy(dAtA[i:], m.InputUrl)
	}
	if len(m.OutputUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTranscodeTask(dAtA, i, uint64(len(m.OutputUrl)))
		i += copy(dAtA[i:], m.OutputUrl)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTranscodeTask(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTranscodeTask(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.ApplicationId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTranscodeTask(dAtA, i, uint64(len(m.ApplicationId)))
		i += copy(dAtA[i:], m.ApplicationId)
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTranscodeTask(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if len(m.UpdatedAt) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTranscodeTask(dAtA, i, uint64(len(m.UpdatedAt)))
		i += copy(dAtA[i:], m.UpdatedAt)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTranscodeTask(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SimpleTranscodeTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTranscodeTask(uint64(l))
	}
	l = len(m.InputUrl)
	if l > 0 {
		n += 1 + l + sovTranscodeTask(uint64(l))
	}
	l = len(m.OutputUrl)
	if l > 0 {
		n += 1 + l + sovTranscodeTask(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTranscodeTask(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTranscodeTask(uint64(l))
	}
	l = len(m.ApplicationId)
	if l > 0 {
		n += 1 + l + sovTranscodeTask(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovTranscodeTask(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovTranscodeTask(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTranscodeTask(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTranscodeTask(x uint64) (n int) {
	return sovTranscodeTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SimpleTranscodeTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTranscodeTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleTranscodeTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleTranscodeTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscodeTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTranscodeTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscodeTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTranscodeTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscodeTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTranscodeTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscodeTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTranscodeTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscodeTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTranscodeTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscodeTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTranscodeTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscodeTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTranscodeTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscodeTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTranscodeTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTranscodeTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTranscodeTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTranscodeTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTranscodeTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTranscodeTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTranscodeTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTranscodeTask
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTranscodeTask
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTranscodeTask(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTranscodeTask = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTranscodeTask   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("transcode_task.proto", fileDescriptor_transcode_task_b4f551f8a5c5f4dd)
}

var fileDescriptor_transcode_task_b4f551f8a5c5f4dd = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xcf, 0x6e, 0xd3, 0x30,
	0x1c, 0xc7, 0x9b, 0xae, 0x7f, 0x56, 0x23, 0x46, 0xe4, 0x8d, 0x35, 0xf3, 0x20, 0x0d, 0x45, 0x88,
	0x09, 0xc4, 0x7a, 0xe0, 0xd6, 0x9d, 0x3a, 0xd6, 0x49, 0x95, 0x00, 0xa1, 0x2e, 0xbb, 0x70, 0xa9,
	0xdc, 0xd8, 0x0b, 0x51, 0x53, 0x3b, 0x24, 0xf6, 0xa1, 0x6f, 0x80, 0xf2, 0x04, 0x5c, 0x72, 0x82,
	0xa7, 0xe0, 0xc4, 0x71, 0xe2, 0x84, 0xc4, 0x1d, 0xa1, 0xf6, 0x0d, 0x78, 0x02, 0x14, 0x27, 0x5d,
	0x91, 0x4f, 0x5c, 0x38, 0xd9, 0xbf, 0xdf, 0xe7, 0xa3, 0xfa, 0x5b, 0xff, 0x1c, 0xb0, 0x27, 0x62,
	0xcc, 0x12, 0x8f, 0x13, 0x3a, 0x11, 0x38, 0x99, 0x1d, 0x47, 0x31, 0x17, 0x1c, 0xd6, 0xd5, 0x82,
	0x3a, 0x3e, 0xe7, 0x7e, 0x48, 0x7b, 0xaa, 0x9a, 0xca, 0xab, 0x9e, 0x08, 0xe6, 0x34, 0x11, 0x78,
	0x1e, 0x15, 0x1e, 0xb2, 0x75, 0x81, 0xc8, 0x18, 0x8b, 0x80, 0xb3, 0x92, 0x1f, 0xe8, 0x1c, 0xb3,
	0x45, 0x89, 0x9e, 0xf9, 0x81, 0x78, 0x27, 0xa7, 0xc7, 0x1e, 0x9f, 0xf7, 0x7c, 0xee, 0xf3, 0x8d,
	0x93, 0x57, 0xaa, 0x50, 0xbb, 0x52, 0x07, 0x4c, 0x86, 0x61, 0xb1, 0xef, 0xfe, 0xd8, 0x02, 0xbb,
	0x17, 0xc1, 0x3c, 0x0a, 0xa9, 0xbb, 0x0e, 0xef, 0xe2, 0x64, 0x06, 0x77, 0x40, 0x35, 0x20, 0x96,
	0xe1, 0x18, 0x47, 0xad, 0x71, 0x35, 0x20, 0xf0, 0x10, 0xb4, 0x02, 0x16, 0x49, 0x31, 0x91, 0x71,
	0x68, 0x55, 0x55, 0x7b, 0x5b, 0x35, 0x2e, 0xe3, 0x10, 0xde, 0x07, 0x80, 0x4b, 0xb1, 0xa6, 0x5b,
	0x8a, 0xb6, 0x8a, 0x4e, 0x8e, 0xf7, 0x41, 0x23, 0x11, 0x58, 0xc8, 0xc4, 0xaa, 0x29, 0x54, 0x56,
	0xb0, 0x0d, 0x9a, 0x32, 0xa1, 0xf1, 0x24, 0x20, 0x56, 0xbd, 0x00, 0x79, 0x39, 0x22, 0xf0, 0x11,
	0xd8, 0xc1, 0x51, 0x14, 0x06, 0x9e, 0xfa, 0xff, 0x39, 0x6f, 0x28, 0x7e, 0xfb, 0xaf, 0xee, 0x88,
	0xc0, 0xd4, 0x00, 0xc0, 0x8b, 0x29, 0x16, 0x94, 0x4c, 0xb0, 0xb0, 0x9a, 0xb9, 0x73, 0x3a, 0xfb,
	0xfd, 0xb3, 0xe3, 0xfb, 0x3c, 0x9e, 0xf7, 0xbb, 0x1b, 0x76, 0x22, 0x16, 0x11, 0xed, 0x9f, 0x0d,
	0xdc, 0xa1, 0x3b, 0x7a, 0x35, 0x3c, 0x39, 0x1b, 0x9e, 0x0f, 0x2e, 0x5f, 0xba, 0x7d, 0x4f, 0xc6,
	0x31, 0x65, 0x62, 0x72, 0x33, 0x8a, 0xae, 0x93, 0xbc, 0x0f, 0xfb, 0xdd, 0x7f, 0xb5, 0xc7, 0xad,
	0xf2, 0x88, 0x81, 0x50, 0x61, 0x64, 0x44, 0xd6, 0x61, 0xb6, 0xf5, 0x30, 0x1b, 0xf6, 0xdf, 0xc2,
	0x94, 0x47, 0x0c, 0xc4, 0x93, 0x6f, 0x55, 0x70, 0xe7, 0x66, 0x9e, 0x17, 0xc5, 0x6d, 0x3f, 0x00,
	0x35, 0xc6, 0x19, 0x35, 0x2b, 0xa8, 0x9d, 0x66, 0xce, 0xae, 0x86, 0x5f, 0x73, 0x46, 0xe1, 0x63,
	0xd0, 0x8c, 0x28, 0x23, 0x01, 0xf3, 0x4d, 0x03, 0xa1, 0x34, 0x73, 0xf6, 0x35, 0xeb, 0x4d, 0x41,
	0x61, 0x0f, 0xdc, 0x5a, 0xbf, 0xf5, 0x5c, 0xae, 0x22, 0x3b, 0xcd, 0x1c, 0xa4, 0xc9, 0xee, 0xc6,
	0x80, 0x47, 0xa0, 0xe9, 0x61, 0xe6, 0xd1, 0x90, 0x98, 0x5b, 0xe8, 0x30, 0xcd, 0x9c, 0xb6, 0x26,
	0xbf, 0x50, 0x94, 0xe6, 0xb3, 0x6f, 0x5c, 0xe1, 0x20, 0xa4, 0xc4, 0xac, 0xa1, 0x83, 0x34, 0x73,
	0xee, 0x6a, 0xe2, 0xb9, 0x82, 0xf0, 0x29, 0x68, 0x79, 0x3c, 0x7f, 0xb6, 0x82, 0x12, 0xb3, 0x8e,
	0xee, 0xa5, 0x99, 0x63, 0xe9, 0x3f, 0xb9, 0xe6, 0xf0, 0x21, 0xa8, 0xc7, 0x14, 0x93, 0x85, 0xd9,
	0x40, 0x56, 0x9a, 0x39, 0x7b, 0x9a, 0x38, 0xce, 0x19, 0x6a, 0x7f, 0xf8, 0x64, 0x57, 0xbe, 0x7c,
	0xb6, 0xf5, 0x8b, 0x3b, 0xed, 0x5c, 0x2f, 0x6d, 0xe3, 0xfb, 0xd2, 0x36, 0x7e, 0x2d, 0x6d, 0xe3,
	0xe3, 0xca, 0xae, 0x7c, 0x5d, 0xd9, 0xc6, 0xf5, 0xca, 0xae, 0xbc, 0x2d, 0x3e, 0xed, 0x69, 0x43,
	0x2d, 0xcf, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xbc, 0x3b, 0xd1, 0x00, 0x04, 0x00, 0x00,
}
