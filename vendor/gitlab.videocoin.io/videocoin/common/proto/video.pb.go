// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: video.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TranscodeStatus int32

const (
	TranscodeStatus_NONE                 TranscodeStatus = 0
	TranscodeStatus_PENDING              TranscodeStatus = 1
	TranscodeStatus_ENCODING             TranscodeStatus = 4
	TranscodeStatus_COMPLETED            TranscodeStatus = 5
	TranscodeStatus_FAILED               TranscodeStatus = 6
	TranscodeStatus_CANCELED             TranscodeStatus = 7
	TranscodeStatus_ONAIR                TranscodeStatus = 8
	TranscodeStatus_PREPARE_FOR_ENCODING TranscodeStatus = 9
	TranscodeStatus_READY_FOR_ENCODING   TranscodeStatus = 10
	TranscodeStatus_SYNCED               TranscodeStatus = 11
	TranscodeStatus_BROADCASTING         TranscodeStatus = 12
)

var TranscodeStatus_name = map[int32]string{
	0:  "NONE",
	1:  "PENDING",
	4:  "ENCODING",
	5:  "COMPLETED",
	6:  "FAILED",
	7:  "CANCELED",
	8:  "ONAIR",
	9:  "PREPARE_FOR_ENCODING",
	10: "READY_FOR_ENCODING",
	11: "SYNCED",
	12: "BROADCASTING",
}
var TranscodeStatus_value = map[string]int32{
	"NONE":                 0,
	"PENDING":              1,
	"ENCODING":             4,
	"COMPLETED":            5,
	"FAILED":               6,
	"CANCELED":             7,
	"ONAIR":                8,
	"PREPARE_FOR_ENCODING": 9,
	"READY_FOR_ENCODING":   10,
	"SYNCED":               11,
	"BROADCASTING":         12,
}

func (x TranscodeStatus) String() string {
	return proto.EnumName(TranscodeStatus_name, int32(x))
}
func (TranscodeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_video_30b670b5ff168bb5, []int{0}
}

type VideoInput struct {
	Uri                  string   `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Format               string   `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	StereoFormat         string   `protobuf:"bytes,3,opt,name=stereo_format,json=stereoFormat,proto3" json:"stereo_format,omitempty"`
	Projection           string   `protobuf:"bytes,4,opt,name=projection,proto3" json:"projection,omitempty"`
	Framerate            uint32   `protobuf:"varint,5,opt,name=framerate,proto3" json:"framerate,omitempty"`
	IsSmoothProj         bool     `protobuf:"varint,6,opt,name=is_smooth_proj,json=isSmoothProj,proto3" json:"is_smooth_proj,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoInput) Reset()         { *m = VideoInput{} }
func (m *VideoInput) String() string { return proto.CompactTextString(m) }
func (*VideoInput) ProtoMessage()    {}
func (*VideoInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_video_30b670b5ff168bb5, []int{0}
}
func (m *VideoInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VideoInput.Unmarshal(m, b)
}
func (m *VideoInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VideoInput.Marshal(b, m, deterministic)
}
func (dst *VideoInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoInput.Merge(dst, src)
}
func (m *VideoInput) XXX_Size() int {
	return xxx_messageInfo_VideoInput.Size(m)
}
func (m *VideoInput) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoInput.DiscardUnknown(m)
}

var xxx_messageInfo_VideoInput proto.InternalMessageInfo

func (m *VideoInput) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *VideoInput) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *VideoInput) GetStereoFormat() string {
	if m != nil {
		return m.StereoFormat
	}
	return ""
}

func (m *VideoInput) GetProjection() string {
	if m != nil {
		return m.Projection
	}
	return ""
}

func (m *VideoInput) GetFramerate() uint32 {
	if m != nil {
		return m.Framerate
	}
	return 0
}

func (m *VideoInput) GetIsSmoothProj() bool {
	if m != nil {
		return m.IsSmoothProj
	}
	return false
}

type VideoOutput struct {
	Codec                string   `protobuf:"bytes,1,opt,name=codec,proto3" json:"codec,omitempty"`
	Format               string   `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	StereoFormat         string   `protobuf:"bytes,3,opt,name=stereo_format,json=stereoFormat,proto3" json:"stereo_format,omitempty"`
	Projection           string   `protobuf:"bytes,4,opt,name=projection,proto3" json:"projection,omitempty"`
	Destination          string   `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty"`
	IsLive               bool     `protobuf:"varint,6,opt,name=is_live,json=isLive,proto3" json:"is_live,omitempty"`
	RtmpAddress          string   `protobuf:"bytes,7,opt,name=rtmp_address,json=rtmpAddress,proto3" json:"rtmp_address,omitempty"`
	BackupRtmpAddress    string   `protobuf:"bytes,8,opt,name=backup_rtmp_address,json=backupRtmpAddress,proto3" json:"backup_rtmp_address,omitempty"`
	ObjectName           string   `protobuf:"bytes,9,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	Width                uint32   `protobuf:"varint,20,opt,name=width,proto3" json:"width,omitempty"`
	Height               uint32   `protobuf:"varint,21,opt,name=height,proto3" json:"height,omitempty"`
	Bitrate              uint32   `protobuf:"varint,22,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	Framerate            uint32   `protobuf:"varint,23,opt,name=framerate,proto3" json:"framerate,omitempty"`
	GopSize              uint32   `protobuf:"varint,24,opt,name=gop_size,json=gopSize,proto3" json:"gop_size,omitempty"`
	ConstRateFactor      uint32   `protobuf:"varint,25,opt,name=const_rate_factor,json=constRateFactor,proto3" json:"const_rate_factor,omitempty"`
	MinRate              uint32   `protobuf:"varint,26,opt,name=min_rate,json=minRate,proto3" json:"min_rate,omitempty"`
	MaxRate              uint32   `protobuf:"varint,27,opt,name=max_rate,json=maxRate,proto3" json:"max_rate,omitempty"`
	BufSize              uint32   `protobuf:"varint,28,opt,name=buf_size,json=bufSize,proto3" json:"buf_size,omitempty"`
	Preset               string   `protobuf:"bytes,40,opt,name=preset,proto3" json:"preset,omitempty"`
	Profile              string   `protobuf:"bytes,41,opt,name=profile,proto3" json:"profile,omitempty"`
	SegmentTime          uint32   `protobuf:"varint,60,opt,name=segment_time,json=segmentTime,proto3" json:"segment_time,omitempty"`
	SegmentListSize      uint32   `protobuf:"varint,61,opt,name=segment_list_size,json=segmentListSize,proto3" json:"segment_list_size,omitempty"`
	Interpolation        string   `protobuf:"bytes,80,opt,name=interpolation,proto3" json:"interpolation,omitempty"`
	CubeEdgeLength       uint32   `protobuf:"varint,81,opt,name=cube_edge_length,json=cubeEdgeLength,proto3" json:"cube_edge_length,omitempty"`
	CubeOffcenterZ       float32  `protobuf:"fixed32,82,opt,name=cube_offcenter_z,json=cubeOffcenterZ,proto3" json:"cube_offcenter_z,omitempty"`
	ExpandCoef           float32  `protobuf:"fixed32,83,opt,name=expand_coef,json=expandCoef,proto3" json:"expand_coef,omitempty"`
	OffsetZ              float32  `protobuf:"fixed32,84,opt,name=offset_z,json=offsetZ,proto3" json:"offset_z,omitempty"`
	Streams              uint32   `protobuf:"varint,85,opt,name=streams,proto3" json:"streams,omitempty"`
	TotalStreams         uint32   `protobuf:"varint,86,opt,name=total_streams,json=totalStreams,proto3" json:"total_streams,omitempty"`
	Yaw                  uint32   `protobuf:"varint,87,opt,name=yaw,proto3" json:"yaw,omitempty"`
	Padding              float32  `protobuf:"fixed32,88,opt,name=padding,proto3" json:"padding,omitempty"`
	CubemapFaceOrder     string   `protobuf:"bytes,89,opt,name=cubemap_face_order,json=cubemapFaceOrder,proto3" json:"cubemap_face_order,omitempty"`
	IsSmoothstep         bool     `protobuf:"varint,90,opt,name=is_smoothstep,json=isSmoothstep,proto3" json:"is_smoothstep,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoOutput) Reset()         { *m = VideoOutput{} }
func (m *VideoOutput) String() string { return proto.CompactTextString(m) }
func (*VideoOutput) ProtoMessage()    {}
func (*VideoOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_video_30b670b5ff168bb5, []int{1}
}
func (m *VideoOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VideoOutput.Unmarshal(m, b)
}
func (m *VideoOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VideoOutput.Marshal(b, m, deterministic)
}
func (dst *VideoOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoOutput.Merge(dst, src)
}
func (m *VideoOutput) XXX_Size() int {
	return xxx_messageInfo_VideoOutput.Size(m)
}
func (m *VideoOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoOutput.DiscardUnknown(m)
}

var xxx_messageInfo_VideoOutput proto.InternalMessageInfo

func (m *VideoOutput) GetCodec() string {
	if m != nil {
		return m.Codec
	}
	return ""
}

func (m *VideoOutput) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *VideoOutput) GetStereoFormat() string {
	if m != nil {
		return m.StereoFormat
	}
	return ""
}

func (m *VideoOutput) GetProjection() string {
	if m != nil {
		return m.Projection
	}
	return ""
}

func (m *VideoOutput) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *VideoOutput) GetIsLive() bool {
	if m != nil {
		return m.IsLive
	}
	return false
}

func (m *VideoOutput) GetRtmpAddress() string {
	if m != nil {
		return m.RtmpAddress
	}
	return ""
}

func (m *VideoOutput) GetBackupRtmpAddress() string {
	if m != nil {
		return m.BackupRtmpAddress
	}
	return ""
}

func (m *VideoOutput) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *VideoOutput) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *VideoOutput) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *VideoOutput) GetBitrate() uint32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

func (m *VideoOutput) GetFramerate() uint32 {
	if m != nil {
		return m.Framerate
	}
	return 0
}

func (m *VideoOutput) GetGopSize() uint32 {
	if m != nil {
		return m.GopSize
	}
	return 0
}

func (m *VideoOutput) GetConstRateFactor() uint32 {
	if m != nil {
		return m.ConstRateFactor
	}
	return 0
}

func (m *VideoOutput) GetMinRate() uint32 {
	if m != nil {
		return m.MinRate
	}
	return 0
}

func (m *VideoOutput) GetMaxRate() uint32 {
	if m != nil {
		return m.MaxRate
	}
	return 0
}

func (m *VideoOutput) GetBufSize() uint32 {
	if m != nil {
		return m.BufSize
	}
	return 0
}

func (m *VideoOutput) GetPreset() string {
	if m != nil {
		return m.Preset
	}
	return ""
}

func (m *VideoOutput) GetProfile() string {
	if m != nil {
		return m.Profile
	}
	return ""
}

func (m *VideoOutput) GetSegmentTime() uint32 {
	if m != nil {
		return m.SegmentTime
	}
	return 0
}

func (m *VideoOutput) GetSegmentListSize() uint32 {
	if m != nil {
		return m.SegmentListSize
	}
	return 0
}

func (m *VideoOutput) GetInterpolation() string {
	if m != nil {
		return m.Interpolation
	}
	return ""
}

func (m *VideoOutput) GetCubeEdgeLength() uint32 {
	if m != nil {
		return m.CubeEdgeLength
	}
	return 0
}

func (m *VideoOutput) GetCubeOffcenterZ() float32 {
	if m != nil {
		return m.CubeOffcenterZ
	}
	return 0
}

func (m *VideoOutput) GetExpandCoef() float32 {
	if m != nil {
		return m.ExpandCoef
	}
	return 0
}

func (m *VideoOutput) GetOffsetZ() float32 {
	if m != nil {
		return m.OffsetZ
	}
	return 0
}

func (m *VideoOutput) GetStreams() uint32 {
	if m != nil {
		return m.Streams
	}
	return 0
}

func (m *VideoOutput) GetTotalStreams() uint32 {
	if m != nil {
		return m.TotalStreams
	}
	return 0
}

func (m *VideoOutput) GetYaw() uint32 {
	if m != nil {
		return m.Yaw
	}
	return 0
}

func (m *VideoOutput) GetPadding() float32 {
	if m != nil {
		return m.Padding
	}
	return 0
}

func (m *VideoOutput) GetCubemapFaceOrder() string {
	if m != nil {
		return m.CubemapFaceOrder
	}
	return ""
}

func (m *VideoOutput) GetIsSmoothstep() bool {
	if m != nil {
		return m.IsSmoothstep
	}
	return false
}

func init() {
	proto.RegisterType((*VideoInput)(nil), "proto.VideoInput")
	proto.RegisterType((*VideoOutput)(nil), "proto.VideoOutput")
	proto.RegisterEnum("proto.TranscodeStatus", TranscodeStatus_name, TranscodeStatus_value)
}

func init() { proto.RegisterFile("video.proto", fileDescriptor_video_30b670b5ff168bb5) }

var fileDescriptor_video_30b670b5ff168bb5 = []byte{
	// 848 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x72, 0x1b, 0x35,
	0x1c, 0x8f, 0xdb, 0xf8, 0x4b, 0x76, 0xda, 0xad, 0x08, 0x89, 0x5a, 0x3a, 0xc6, 0x94, 0x1e, 0x4c,
	0x07, 0xd2, 0x03, 0x57, 0x38, 0xb8, 0xf6, 0x9a, 0xc9, 0x8c, 0xb1, 0xcd, 0xda, 0x14, 0x92, 0x8b,
	0x46, 0xde, 0xfd, 0xef, 0x5a, 0xc5, 0xbb, 0xda, 0x59, 0x69, 0xd3, 0x90, 0x27, 0xe1, 0xcc, 0x63,
	0x70, 0xe1, 0xca, 0x91, 0x47, 0x60, 0xc2, 0x8b, 0x30, 0xfa, 0x6b, 0x1d, 0x62, 0xee, 0x9c, 0x56,
	0xbf, 0x0f, 0xfd, 0xbf, 0xa4, 0x15, 0xe9, 0x5c, 0xc9, 0x08, 0xd4, 0x59, 0x5e, 0x28, 0xa3, 0x68,
	0x1d, 0x3f, 0xcf, 0xbe, 0x48, 0xa4, 0xd9, 0x94, 0xeb, 0xb3, 0x50, 0xa5, 0xaf, 0x13, 0x95, 0xa8,
	0xd7, 0x48, 0xaf, 0xcb, 0x18, 0x11, 0x02, 0x5c, 0xb9, 0x5d, 0x2f, 0x7e, 0xaf, 0x11, 0xf2, 0xd6,
	0x46, 0x39, 0xcf, 0xf2, 0xd2, 0x50, 0x8f, 0x3c, 0x2c, 0x0b, 0xc9, 0x6a, 0xfd, 0xda, 0xa0, 0x1d,
	0xd8, 0x25, 0x3d, 0x21, 0x8d, 0x58, 0x15, 0xa9, 0x30, 0xec, 0x01, 0x92, 0x15, 0xa2, 0x9f, 0x92,
	0x23, 0x6d, 0xa0, 0x00, 0xc5, 0x2b, 0xf9, 0x21, 0xca, 0x5d, 0x47, 0x4e, 0x9c, 0xa9, 0x47, 0x48,
	0x5e, 0xa8, 0x77, 0x10, 0x1a, 0xa9, 0x32, 0x76, 0x88, 0x8e, 0x7b, 0x0c, 0x7d, 0x4e, 0xda, 0x71,
	0x21, 0x52, 0x28, 0x84, 0x01, 0x56, 0xef, 0xd7, 0x06, 0x47, 0xc1, 0xbf, 0x04, 0x7d, 0x49, 0x1e,
	0x49, 0xcd, 0x75, 0xaa, 0x94, 0xd9, 0x70, 0xbb, 0x8b, 0x35, 0xfa, 0xb5, 0x41, 0x2b, 0xe8, 0x4a,
	0xbd, 0x44, 0x72, 0x51, 0xa8, 0x77, 0x2f, 0x7e, 0x6d, 0x91, 0x0e, 0x76, 0x30, 0x2f, 0x8d, 0x6d,
	0xe1, 0x98, 0xd4, 0x43, 0x15, 0x41, 0x58, 0x35, 0xe1, 0xc0, 0xff, 0xdb, 0x46, 0x9f, 0x74, 0x22,
	0xd0, 0x46, 0x66, 0x02, 0x0d, 0x75, 0x34, 0xdc, 0xa7, 0xe8, 0x29, 0x69, 0x4a, 0xcd, 0xb7, 0xf2,
	0x0a, 0xaa, 0x1e, 0x1a, 0x52, 0x4f, 0xe5, 0x15, 0xd0, 0x4f, 0x48, 0xb7, 0x30, 0x69, 0xce, 0x45,
	0x14, 0x15, 0xa0, 0x35, 0x6b, 0xba, 0xbd, 0x96, 0x1b, 0x3a, 0x8a, 0x9e, 0x91, 0x0f, 0xd6, 0x22,
	0xfc, 0xa9, 0xcc, 0xf9, 0x9e, 0xb3, 0x85, 0xce, 0x27, 0x4e, 0x0a, 0xee, 0xf9, 0x3f, 0x26, 0x1d,
	0xb5, 0xb6, 0xa5, 0xf1, 0x4c, 0xa4, 0xc0, 0xda, 0xae, 0x5c, 0x47, 0xcd, 0x44, 0x0a, 0x76, 0x42,
	0xef, 0x65, 0x64, 0x36, 0xec, 0x18, 0x27, 0xee, 0x80, 0x9d, 0xd0, 0x06, 0x64, 0xb2, 0x31, 0xec,
	0x43, 0xa4, 0x2b, 0x44, 0x19, 0x69, 0xae, 0xa5, 0xc1, 0x13, 0x3a, 0x41, 0x61, 0x07, 0xf7, 0x4f,
	0xef, 0xf4, 0xbf, 0xa7, 0xf7, 0x94, 0xb4, 0x12, 0x95, 0x73, 0x2d, 0x6f, 0x80, 0x31, 0xb7, 0x31,
	0x51, 0xf9, 0x52, 0xde, 0x00, 0x7d, 0x45, 0x9e, 0x84, 0x2a, 0xd3, 0x86, 0x5b, 0x23, 0x8f, 0x45,
	0x68, 0x54, 0xc1, 0x9e, 0xa2, 0xe7, 0x31, 0x0a, 0x81, 0x30, 0x30, 0x41, 0xda, 0x86, 0x49, 0x65,
	0x86, 0x4e, 0xf6, 0xcc, 0x85, 0x49, 0x65, 0x16, 0x54, 0x19, 0x52, 0x71, 0xed, 0xa4, 0x8f, 0x2a,
	0x49, 0x5c, 0xef, 0xa4, 0x75, 0x19, 0xbb, 0xe4, 0xcf, 0xab, 0xaa, 0xcb, 0x18, 0x93, 0x9f, 0x90,
	0x46, 0x5e, 0x80, 0x06, 0xc3, 0x06, 0xee, 0x26, 0x38, 0x64, 0xfb, 0xcc, 0x0b, 0x15, 0xcb, 0x2d,
	0xb0, 0xcf, 0x50, 0xd8, 0x41, 0x7b, 0x46, 0x1a, 0x92, 0x14, 0x32, 0xc3, 0x8d, 0x4c, 0x81, 0x7d,
	0x85, 0x01, 0x3b, 0x15, 0xb7, 0x92, 0x29, 0x76, 0xb4, 0xb3, 0x6c, 0xa5, 0x36, 0x2e, 0xf1, 0xd7,
	0xae, 0xa3, 0x4a, 0x98, 0x4a, 0x6d, 0xb0, 0x80, 0x97, 0xe4, 0x48, 0x66, 0x06, 0x8a, 0x5c, 0x6d,
	0xdd, 0x7d, 0x59, 0x60, 0xba, 0x7d, 0x92, 0x0e, 0x88, 0x17, 0x96, 0x6b, 0xe0, 0x10, 0x25, 0xc0,
	0xb7, 0x90, 0x25, 0x66, 0xc3, 0xbe, 0xc3, 0x80, 0x8f, 0x2c, 0xef, 0x47, 0x09, 0x4c, 0x91, 0xbd,
	0x73, 0xaa, 0x38, 0x0e, 0xc1, 0xc6, 0xe0, 0x37, 0x2c, 0xe8, 0xd7, 0x06, 0x0f, 0x9c, 0x73, 0xbe,
	0xa3, 0x2f, 0xed, 0xcd, 0x80, 0xeb, 0x5c, 0x64, 0x11, 0x0f, 0x15, 0xc4, 0x6c, 0x89, 0x26, 0xe2,
	0xa8, 0x91, 0x82, 0xd8, 0x8e, 0x4d, 0xc5, 0xb1, 0x06, 0xc3, 0x6f, 0xd8, 0x0a, 0xd5, 0xa6, 0xc3,
	0x97, 0x76, 0x3c, 0xda, 0x14, 0x20, 0x52, 0xcd, 0xbe, 0x77, 0x03, 0xad, 0xa0, 0xfd, 0x85, 0x8c,
	0x32, 0x62, 0xcb, 0x77, 0xfa, 0x5b, 0xd4, 0xbb, 0x48, 0x2e, 0x2b, 0x93, 0x47, 0x1e, 0xfe, 0x2c,
	0xde, 0xb3, 0x1f, 0x50, 0xb2, 0x4b, 0x9c, 0xb7, 0x88, 0x22, 0x99, 0x25, 0xec, 0x47, 0x97, 0xaa,
	0x82, 0xf4, 0x73, 0x42, 0x6d, 0xe1, 0xa9, 0xc8, 0xed, 0xdd, 0x00, 0xae, 0x8a, 0x08, 0x0a, 0x76,
	0x81, 0x53, 0xf2, 0x2a, 0x65, 0x22, 0x42, 0x98, 0x5b, 0xde, 0xa6, 0xbf, 0x7b, 0x25, 0xb4, 0x81,
	0x9c, 0x5d, 0xee, 0x3f, 0x12, 0x96, 0x7b, 0xf5, 0x5b, 0x8d, 0x3c, 0x5e, 0x15, 0x22, 0xd3, 0xf6,
	0x35, 0x58, 0x1a, 0x61, 0x4a, 0x4d, 0x5b, 0xe4, 0x70, 0x36, 0x9f, 0xf9, 0xde, 0x01, 0xed, 0x90,
	0xe6, 0xc2, 0x9f, 0x8d, 0xcf, 0x67, 0xdf, 0x78, 0x35, 0xda, 0x25, 0x2d, 0x7f, 0x36, 0x9a, 0x23,
	0x3a, 0xa4, 0x47, 0xa4, 0x3d, 0x9a, 0x7f, 0xbb, 0x98, 0xfa, 0x2b, 0x7f, 0xec, 0xd5, 0x29, 0x21,
	0x8d, 0xc9, 0xf0, 0x7c, 0xea, 0x8f, 0xbd, 0x86, 0x35, 0x8e, 0x86, 0xb3, 0x91, 0x6f, 0x51, 0x93,
	0xb6, 0x49, 0x7d, 0x3e, 0x1b, 0x9e, 0x07, 0x5e, 0x8b, 0x32, 0x72, 0xbc, 0x08, 0xfc, 0xc5, 0x30,
	0xf0, 0xf9, 0x64, 0x1e, 0xf0, 0xbb, 0x68, 0x6d, 0x7a, 0x42, 0x68, 0xe0, 0x0f, 0xc7, 0x17, 0xfb,
	0x3c, 0xb1, 0x61, 0x97, 0x17, 0xb3, 0x91, 0x3f, 0xf6, 0x3a, 0xd4, 0x23, 0xdd, 0x37, 0xc1, 0x7c,
	0x38, 0x1e, 0x0d, 0x97, 0x2b, 0xab, 0x76, 0xdf, 0x9c, 0xfe, 0x71, 0xdb, 0x3b, 0xf8, 0xf3, 0xb6,
	0x77, 0xf0, 0xd7, 0x6d, 0xef, 0xe0, 0x97, 0xbf, 0x7b, 0x07, 0x97, 0xee, 0xad, 0x5f, 0x37, 0xf0,
	0xf3, 0xe5, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xaf, 0x18, 0xb9, 0x08, 0x06, 0x00, 0x00,
}
