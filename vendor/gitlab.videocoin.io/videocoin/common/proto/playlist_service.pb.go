// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: playlist_service.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/mwitkow/go-proto-validators"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetPlaylistRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetPlaylistRequest) Reset()         { *m = GetPlaylistRequest{} }
func (m *GetPlaylistRequest) String() string { return proto1.CompactTextString(m) }
func (*GetPlaylistRequest) ProtoMessage()    {}
func (*GetPlaylistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPlaylistService, []int{0}
}

func (m *GetPlaylistRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ClosePlaylistRequest struct {
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	VariantId string `protobuf:"bytes,2,opt,name=variant_id,json=variantId,proto3" json:"variant_id,omitempty"`
}

func (m *ClosePlaylistRequest) Reset()         { *m = ClosePlaylistRequest{} }
func (m *ClosePlaylistRequest) String() string { return proto1.CompactTextString(m) }
func (*ClosePlaylistRequest) ProtoMessage()    {}
func (*ClosePlaylistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPlaylistService, []int{1}
}

func (m *ClosePlaylistRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClosePlaylistRequest) GetVariantId() string {
	if m != nil {
		return m.VariantId
	}
	return ""
}

type CancelPlaylistRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CancelPlaylistRequest) Reset()         { *m = CancelPlaylistRequest{} }
func (m *CancelPlaylistRequest) String() string { return proto1.CompactTextString(m) }
func (*CancelPlaylistRequest) ProtoMessage()    {}
func (*CancelPlaylistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPlaylistService, []int{2}
}

func (m *CancelPlaylistRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AddSegmentRequest struct {
	PlaylistId string  `protobuf:"bytes,1,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
	VariantId  string  `protobuf:"bytes,2,opt,name=variant_id,json=variantId,proto3" json:"variant_id,omitempty"`
	Num        uint64  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Name       string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Duration   float64 `protobuf:"fixed64,5,opt,name=duration,proto3" json:"duration,omitempty"`
	IsLive     bool    `protobuf:"varint,6,opt,name=is_live,json=isLive,proto3" json:"is_live,omitempty"`
	IsLast     bool    `protobuf:"varint,7,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
}

func (m *AddSegmentRequest) Reset()                    { *m = AddSegmentRequest{} }
func (m *AddSegmentRequest) String() string            { return proto1.CompactTextString(m) }
func (*AddSegmentRequest) ProtoMessage()               {}
func (*AddSegmentRequest) Descriptor() ([]byte, []int) { return fileDescriptorPlaylistService, []int{3} }

func (m *AddSegmentRequest) GetPlaylistId() string {
	if m != nil {
		return m.PlaylistId
	}
	return ""
}

func (m *AddSegmentRequest) GetVariantId() string {
	if m != nil {
		return m.VariantId
	}
	return ""
}

func (m *AddSegmentRequest) GetNum() uint64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *AddSegmentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddSegmentRequest) GetDuration() float64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *AddSegmentRequest) GetIsLive() bool {
	if m != nil {
		return m.IsLive
	}
	return false
}

func (m *AddSegmentRequest) GetIsLast() bool {
	if m != nil {
		return m.IsLast
	}
	return false
}

type GetPlaylistManifestRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetPlaylistManifestRequest) Reset()         { *m = GetPlaylistManifestRequest{} }
func (m *GetPlaylistManifestRequest) String() string { return proto1.CompactTextString(m) }
func (*GetPlaylistManifestRequest) ProtoMessage()    {}
func (*GetPlaylistManifestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPlaylistService, []int{4}
}

func (m *GetPlaylistManifestRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto1.RegisterType((*GetPlaylistRequest)(nil), "proto.GetPlaylistRequest")
	proto1.RegisterType((*ClosePlaylistRequest)(nil), "proto.ClosePlaylistRequest")
	proto1.RegisterType((*CancelPlaylistRequest)(nil), "proto.CancelPlaylistRequest")
	proto1.RegisterType((*AddSegmentRequest)(nil), "proto.AddSegmentRequest")
	proto1.RegisterType((*GetPlaylistManifestRequest)(nil), "proto.GetPlaylistManifestRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PlaylistService service

type PlaylistServiceClient interface {
	Health(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*HealthStatus, error)
	Create(ctx context.Context, in *Playlist, opts ...grpc.CallOption) (*Playlist, error)
	Get(ctx context.Context, in *GetPlaylistRequest, opts ...grpc.CallOption) (*Playlist, error)
	Cancel(ctx context.Context, in *CancelPlaylistRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	GetManifest(ctx context.Context, in *GetPlaylistManifestRequest, opts ...grpc.CallOption) (*PlaylistManifest, error)
}

type playlistServiceClient struct {
	cc *grpc.ClientConn
}

func NewPlaylistServiceClient(cc *grpc.ClientConn) PlaylistServiceClient {
	return &playlistServiceClient{cc}
}

func (c *playlistServiceClient) Health(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*HealthStatus, error) {
	out := new(HealthStatus)
	err := grpc.Invoke(ctx, "/proto.PlaylistService/Health", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Create(ctx context.Context, in *Playlist, opts ...grpc.CallOption) (*Playlist, error) {
	out := new(Playlist)
	err := grpc.Invoke(ctx, "/proto.PlaylistService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Get(ctx context.Context, in *GetPlaylistRequest, opts ...grpc.CallOption) (*Playlist, error) {
	out := new(Playlist)
	err := grpc.Invoke(ctx, "/proto.PlaylistService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Cancel(ctx context.Context, in *CancelPlaylistRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/proto.PlaylistService/Cancel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) GetManifest(ctx context.Context, in *GetPlaylistManifestRequest, opts ...grpc.CallOption) (*PlaylistManifest, error) {
	out := new(PlaylistManifest)
	err := grpc.Invoke(ctx, "/proto.PlaylistService/GetManifest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PlaylistService service

type PlaylistServiceServer interface {
	Health(context.Context, *google_protobuf2.Empty) (*HealthStatus, error)
	Create(context.Context, *Playlist) (*Playlist, error)
	Get(context.Context, *GetPlaylistRequest) (*Playlist, error)
	Cancel(context.Context, *CancelPlaylistRequest) (*google_protobuf2.Empty, error)
	GetManifest(context.Context, *GetPlaylistManifestRequest) (*PlaylistManifest, error)
}

func RegisterPlaylistServiceServer(s *grpc.Server, srv PlaylistServiceServer) {
	s.RegisterService(&_PlaylistService_serviceDesc, srv)
}

func _PlaylistService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PlaylistService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Health(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Playlist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PlaylistService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Create(ctx, req.(*Playlist))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PlaylistService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Get(ctx, req.(*GetPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PlaylistService/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Cancel(ctx, req.(*CancelPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_GetManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaylistManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).GetManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PlaylistService/GetManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).GetManifest(ctx, req.(*GetPlaylistManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlaylistService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PlaylistService",
	HandlerType: (*PlaylistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _PlaylistService_Health_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PlaylistService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PlaylistService_Get_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _PlaylistService_Cancel_Handler,
		},
		{
			MethodName: "GetManifest",
			Handler:    _PlaylistService_GetManifest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playlist_service.proto",
}

func init() { proto1.RegisterFile("playlist_service.proto", fileDescriptorPlaylistService) }

var fileDescriptorPlaylistService = []byte{
	// 601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x4f, 0x6f, 0xd3, 0x3e,
	0x18, 0x4e, 0xd2, 0x2e, 0xeb, 0xbc, 0x9f, 0xf6, 0xc7, 0x3f, 0xe8, 0x42, 0xe8, 0xda, 0x12, 0x4d,
	0x5b, 0x05, 0x5b, 0xa2, 0x0d, 0x09, 0x09, 0x4e, 0xd0, 0x69, 0xea, 0x26, 0x81, 0x04, 0xdd, 0x8d,
	0xcb, 0xe4, 0x36, 0x5e, 0x6a, 0x48, 0xe2, 0x12, 0x3b, 0xa9, 0x06, 0xe2, 0xc2, 0x57, 0xe0, 0xc2,
	0x47, 0xe2, 0x88, 0xc4, 0x8d, 0x4b, 0x51, 0xe0, 0x5b, 0x70, 0x41, 0x75, 0x9c, 0x50, 0xb5, 0xab,
	0x96, 0x8b, 0xfd, 0x3e, 0xef, 0xf3, 0xbe, 0xaf, 0xed, 0xe7, 0x51, 0x40, 0x75, 0xe8, 0xa3, 0x2b,
	0x9f, 0x30, 0x7e, 0xc1, 0x70, 0x94, 0x90, 0x3e, 0xb6, 0x87, 0x11, 0xe5, 0x14, 0x2e, 0x89, 0xc5,
	0xbc, 0xeb, 0x51, 0xea, 0xf9, 0xd8, 0x11, 0x51, 0x2f, 0xbe, 0x74, 0x70, 0x30, 0xe4, 0x57, 0x19,
	0xc7, 0xac, 0xc9, 0x24, 0x1a, 0x12, 0x07, 0x85, 0x21, 0xe5, 0x88, 0x13, 0x1a, 0x32, 0x99, 0x3d,
	0xf0, 0x08, 0x1f, 0xc4, 0x3d, 0xbb, 0x4f, 0x03, 0xc7, 0xa3, 0x1e, 0xfd, 0xd7, 0x63, 0x12, 0x89,
	0x40, 0xec, 0x24, 0xfd, 0xd1, 0x14, 0x3d, 0x18, 0x11, 0xfe, 0x96, 0x8e, 0x1c, 0x8f, 0x1e, 0x88,
	0xe4, 0x41, 0x82, 0x7c, 0xe2, 0x22, 0x4e, 0x23, 0xe6, 0x14, 0x5b, 0x59, 0xf7, 0xdf, 0x00, 0x23,
	0x9f, 0x0f, 0x64, 0xb4, 0x96, 0x5f, 0x27, 0x8b, 0xad, 0x1d, 0x00, 0x3b, 0x98, 0xbf, 0x94, 0x60,
	0x17, 0xbf, 0x8b, 0x31, 0xe3, 0x70, 0x0d, 0x68, 0xc4, 0x35, 0xd4, 0xa6, 0xda, 0x5a, 0xe9, 0x6a,
	0xc4, 0xb5, 0x4e, 0xc0, 0xad, 0x63, 0x9f, 0x32, 0x7c, 0x03, 0x0f, 0x6e, 0x03, 0x90, 0xa0, 0x88,
	0xa0, 0x90, 0x5f, 0x10, 0xd7, 0xd0, 0x04, 0xbe, 0x22, 0x91, 0x33, 0xd7, 0xda, 0x03, 0xb7, 0x8f,
	0x51, 0xd8, 0xc7, 0xfe, 0x4d, 0xf3, 0xfe, 0xa8, 0x60, 0xf3, 0x99, 0xeb, 0x9e, 0x63, 0x2f, 0xc0,
	0x61, 0xc1, 0x6a, 0x80, 0xd5, 0x42, 0x8c, 0x82, 0x0e, 0x72, 0xe8, 0xcc, 0x85, 0x7b, 0xf3, 0xe3,
	0xdb, 0x95, 0x74, 0xdc, 0x28, 0x03, 0xcd, 0x7e, 0x30, 0x75, 0x10, 0x68, 0x80, 0x52, 0x18, 0x07,
	0x46, 0xa9, 0xa9, 0xb6, 0xca, 0x6d, 0x3d, 0x1d, 0x37, 0xb4, 0x0d, 0xa5, 0x3b, 0x81, 0x60, 0x0d,
	0x94, 0x43, 0x14, 0x60, 0xa3, 0x3c, 0x53, 0x2c, 0x50, 0x78, 0x04, 0x2a, 0x6e, 0x1c, 0x09, 0x15,
	0x8d, 0xa5, 0xa6, 0xda, 0x52, 0xdb, 0xd5, 0x74, 0xdc, 0x80, 0x87, 0x8a, 0xfc, 0x1e, 0x67, 0xcb,
	0xee, 0xd3, 0x6e, 0xc1, 0x83, 0x5b, 0x60, 0x99, 0xb0, 0x0b, 0x9f, 0x24, 0xd8, 0xd0, 0x9b, 0x6a,
	0xab, 0xd2, 0xd5, 0x09, 0x7b, 0x4e, 0x12, 0x9c, 0x27, 0x10, 0xe3, 0xc6, 0x72, 0x91, 0x40, 0x8c,
	0x5b, 0xfb, 0xc0, 0x9c, 0xd2, 0xe4, 0x05, 0x0a, 0xc9, 0x25, 0x5e, 0xf8, 0x56, 0x47, 0x3f, 0x4a,
	0x60, 0x3d, 0xe7, 0x9e, 0x67, 0x16, 0x85, 0x1d, 0xa0, 0x9f, 0x0a, 0xd5, 0x61, 0xd5, 0xce, 0x3c,
	0x68, 0xe7, 0xe6, 0xb2, 0x4f, 0x26, 0x06, 0x35, 0xff, 0xcf, 0x00, 0x3b, 0xa3, 0x9d, 0x73, 0xc4,
	0x63, 0x66, 0x6d, 0x7c, 0xfa, 0xfe, 0xfb, 0xb3, 0x06, 0x60, 0xc5, 0xc9, 0x3c, 0xf3, 0x1e, 0x9e,
	0x02, 0xfd, 0x38, 0xc2, 0x88, 0x63, 0xb8, 0x2e, 0x0b, 0xf2, 0x51, 0xe6, 0x2c, 0x60, 0xd5, 0x44,
	0x75, 0xd5, 0xda, 0x14, 0x7e, 0x4f, 0x0e, 0x9d, 0x5c, 0x19, 0xf6, 0x44, 0xbd, 0x0f, 0x5f, 0x81,
	0x52, 0x07, 0x73, 0x78, 0x47, 0x56, 0xcd, 0x9b, 0x6e, 0xbe, 0x61, 0x5d, 0x34, 0x34, 0x60, 0x75,
	0xae, 0xa1, 0xf3, 0x81, 0xb8, 0x1f, 0xe1, 0x00, 0xe8, 0x99, 0x9d, 0x60, 0x4d, 0x96, 0x5e, 0xeb,
	0x2e, 0x73, 0xc1, 0x1b, 0x58, 0x2d, 0xd1, 0xdf, 0xb2, 0xb6, 0xaf, 0xef, 0xef, 0xf4, 0x45, 0xb7,
	0xc9, 0xe1, 0x47, 0x60, 0xb5, 0x83, 0x0b, 0x25, 0xe0, 0xbd, 0xf9, 0x4b, 0xcc, 0xa8, 0x64, 0x6e,
	0xcd, 0x5c, 0x26, 0xcf, 0x5b, 0xfb, 0x62, 0xe8, 0x2e, 0xdc, 0x59, 0x30, 0x34, 0x90, 0x44, 0xfb,
	0x0d, 0xa3, 0x61, 0x7b, 0xeb, 0x6b, 0x5a, 0x57, 0xbe, 0xa5, 0x75, 0xe5, 0x67, 0x5a, 0x57, 0xbe,
	0xfc, 0xaa, 0x2b, 0xaf, 0xb3, 0xff, 0x4e, 0x4f, 0x17, 0xcb, 0xc3, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x20, 0x5b, 0x57, 0x88, 0x9f, 0x04, 0x00, 0x00,
}
